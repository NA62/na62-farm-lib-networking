//g++ -o pcap pcap.cpp PcapDumper.cpp -I/usr/include/ -lpcap -lrt

#include "PcapDumper.h"
//just for sleep
#include <unistd.h>

#include <iostream>
static const unsigned char pkt1[82] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* ........ */
  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x45, 0x00, /* ......E. */
  0x00, 0x44, 0x55, 0xb1, 0x00, 0x00, 0x40, 0x84, /* .DU...@. */
  0x26, 0x83, 0x7f, 0x00, 0x00, 0x01, 0x7f, 0x00, /* &....... */
  0x00, 0x01, 0x00, 0x01, 0x1f, 0x90, 0x00, 0x00, /* ........ */
  0x00, 0x00, 0x68, 0xe5, 0x88, 0x1b, 0x01, 0x00, /* ..h..... */
  0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, /* .$...... */
  0xa0, 0x00, 0x00, 0x04, 0xff, 0xff, 0x00, 0x00, /* ........ */
  0x16, 0x2e, 0x80, 0x00, 0x00, 0x04, 0xc0, 0x00, /* ........ */
  0x00, 0x04, 0x00, 0x0c, 0x00, 0x06, 0x00, 0x05, /* ........ */
  0x00, 0x00                                      /* .. */
};

int main(int argc, char *argv[]) {
using namespace na62;
  //Dumper = new PcapDumper Dumper;
  //PcapDumper Dumper;
  PcapDumper::startDump("File.pcap");

  PcapDumper::dumpPacket( (char*) pkt1, sizeof(pkt1) );
  sleep(1);
  PcapDumper::dumpPacket( (char*) pkt1, sizeof(pkt1) );
  sleep(1);
  PcapDumper::dumpPacket( (char*) pkt1, sizeof(pkt1) );
  PcapDumper::dumpPacket( (char*) pkt1, sizeof(pkt1) );
  PcapDumper::dumpPacket( (char*) pkt1, sizeof(pkt1) );

  PcapDumper::dumpPacket( (char*) pkt1, sizeof(pkt1) );


  PcapDumper::dumpPacket( (char*) pkt1, sizeof(pkt1) );





  PcapDumper::stopDump();


  return 0;
}
